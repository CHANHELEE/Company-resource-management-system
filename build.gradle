plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'prompt'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.webjars:bootstrap:5.2.3'
	implementation 'org.webjars:webjars-locator:0.45'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation "org.mapstruct:mapstruct:1.5.2.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.2.Final"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.5.2.Final"
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// querydsl start
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	// querydsl end

}

tasks.named('test') {
	useJUnitPlatform()
}

//def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile
//
//querydsl {
//	jpa = true
//	querydslSourcesDir = querydslDir
//}
//sourceSets {
//	main.java.srcDir querydslDir
//}
//configurations {
//	querydsl.extendsFrom compileClasspath
//}
//compileQuerydsl {
//	options.annotationProcessorPath = configurations.querydsl
//}

def querydslDir = layout.buildDirectory.dir("generated").get().asFile

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

compileQuerydsl.doFirst {
	if(file(querydslDir).exists() )
	delete(file(querydslDir))
}

